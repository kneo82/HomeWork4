//
// NewsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



open class NewsAPI {
    /**
     Get News
     
     - parameter country: (query) The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de e fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za . Note you cant mix this param with the sources param. 
     - parameter apiKey: (query) Your API key. Alternatively you can provide this via the X-Api-Key HTTP header. 
     - parameter q: (query) Keywords or a phrase to search for. (optional)
     - parameter category: (query) The category you want to get headlines for. Possible options: business entertainment general health science sports technology . Note: you cant mix this param with the sources param. (optional)
     - parameter sources: (query) A comma-seperated string of identifiers for the news sources or blogs you want headlines from. Use the /sources endpoint to locate these programmatically or look at the sources index. Note: you cant mix this param with the country or category params. (optional)
     - parameter pageSize: (query) The number of results to return per page (request). 20 is the default, 100 is the maximum. (optional)
     - parameter page: (query) Use this to page through the results if the total results found is greater than the page size. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getNews(country: String, apiKey: String, q: String? = nil, category: String? = nil, sources: String? = nil, pageSize: Int? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: NewsList?,_ error: Error?) -> Void)) {
        getNewsWithRequestBuilder(country: country, apiKey: apiKey, q: q, category: category, sources: sources, pageSize: pageSize, page: page).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get News
     - GET /v2/top-headlines
     - parameter country: (query) The 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de e fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za . Note you cant mix this param with the sources param. 
     - parameter apiKey: (query) Your API key. Alternatively you can provide this via the X-Api-Key HTTP header. 
     - parameter q: (query) Keywords or a phrase to search for. (optional)
     - parameter category: (query) The category you want to get headlines for. Possible options: business entertainment general health science sports technology . Note: you cant mix this param with the sources param. (optional)
     - parameter sources: (query) A comma-seperated string of identifiers for the news sources or blogs you want headlines from. Use the /sources endpoint to locate these programmatically or look at the sources index. Note: you cant mix this param with the country or category params. (optional)
     - parameter pageSize: (query) The number of results to return per page (request). 20 is the default, 100 is the maximum. (optional)
     - parameter page: (query) Use this to page through the results if the total results found is greater than the page size. (optional)
     - returns: RequestBuilder<NewsList> 
     */
    open class func getNewsWithRequestBuilder(country: String, apiKey: String, q: String? = nil, category: String? = nil, sources: String? = nil, pageSize: Int? = nil, page: Int? = nil) -> RequestBuilder<NewsList> {
        let path = "/v2/top-headlines"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "country": country.encodeToJSON(), 
            "apiKey": apiKey.encodeToJSON(), 
            "q": q?.encodeToJSON(), 
            "category": category?.encodeToJSON(), 
            "sources": sources?.encodeToJSON(), 
            "pageSize": pageSize?.encodeToJSON(), 
            "page": page?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<NewsList>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
